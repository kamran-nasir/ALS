@mixin fontface($name, $folder, $file, $weight: normal, $style: normal) {
	@font-face {
		font-family: "#{$name}";
		src: url('./assets/fonts/#{$folder}/#{$file}.eot');
		src: url('./assets/fonts/#{$folder}/#{$file}.eot?#iefix') format('embedded-opentype'),
		url('./assets/fonts/#{$folder}/#{$file}.woff') format('woff'),
		url('./assets/fonts/#{$folder}/#{$file}.ttf') format('truetype'),
		url('./assets/fonts/#{$folder}/#{$file}.svg?#webfont') format('svg');
		font-weight: $weight;
		font-style: $style;
	}
}

// Responsive Font-Size
@mixin font-size($fs-map, $fs-breakpoints: $grid-breakpoints) {
	@each $fs-breakpoint, $fs-font-size in $fs-map {
		@if $fs-breakpoint==null {
			font-size: $fs-font-size;
		}
		@else {
			// If $fs-font-size is a key that exists in
			// $fs-breakpoints, use the value
			@if map-has-key($fs-breakpoints,
			$fs-breakpoint) {
				$fs-breakpoint: map-get($fs-breakpoints, $fs-breakpoint);
			}
			@include media-breakpoint-up( $fs-breakpoint ) {
				font-size: $fs-font-size;
			}
		}
	}
}

//  Media queries mixins
@mixin xs {
	@media only screen and (min-width: #{map-get($breakpoints, xs)}) {
		@content;
	}
}

@mixin sm {
	@media only screen and (min-width: #{map-get($breakpoints, sm)}) {
		@content;
	}
}

@mixin md {
	@media only screen and (min-width: #{map-get($breakpoints, md)}) {
		@content;
	}
}

@mixin lg {
	@media only screen and (min-width: #{map-get($breakpoints, lg)}) {
		@content;
	}
}

@mixin xl {
	@media only screen and (min-width: #{map-get($breakpoints,xl)}) {
		@content;
	}
}

@mixin xxl {
	@media only screen and (min-width: #{map-get($breakpoints,xxl)}) {
		@content;
	}
}

@mixin custom-width ($min,$max) {
	@media only screen and (min-width: #{$min}) and (max-width: #{$max}) {
		@content;
	}
}


//vertical align
@mixin vertical-align($position: relative) {
	position: $position;
	top: 50%;
	-webkit-transform: translateY(-50%);
	-ms-transform: translateY(-50%);
	transform: translateY(-50%);
}

//placeholder
@mixin placeholder {
	&::-webkit-input-placeholder {
		@content;
	}
	&:-moz-placeholder {
		@content;
	}
	&::-moz-placeholder {
		@content;
	}
	&:-ms-input-placeholder {
		@content;
	}
}


$xxxxl-font: ( null: map-get($font-sizes, xxl), xs: map-get($font-sizes, xxl), md: map-get($font-sizes, xxxl), lg: map-get($font-sizes, xxxxl));
$xxxl-font: ( null: map-get($font-sizes, xl), xs: map-get($font-sizes, xl), md: map-get($font-sizes, xxl), lg: map-get($font-sizes, xxxl));
$xxl-font: ( null: map-get($font-sizes, lg), xs: map-get($font-sizes, lg), md: map-get($font-sizes, xl), lg: map-get($font-sizes, xxl));
$xl-font: ( null: map-get($font-sizes, md), xs: map-get($font-sizes, md), md: map-get($font-sizes, lg), lg: map-get($font-sizes, xl));
$lg-font: ( null: map-get($font-sizes, sm), xs: map-get($font-sizes, sm), md: map-get($font-sizes, md), lg: map-get($font-sizes, lg));
$md-font: ( null: map-get($font-sizes, xs), xs: map-get($font-sizes, xs), md: map-get($font-sizes, sm), lg: map-get($font-sizes, md));
$sm-font: ( null: map-get($font-sizes, xs), xs: map-get($font-sizes, xs), md: map-get($font-sizes, xs), lg: map-get($font-sizes, sm));
$xs-font: ( null: map-get($font-sizes, xxs), xs: map-get($font-sizes, xxs), md: map-get($font-sizes, xxs), lg: map-get($font-sizes, xs));
$xxs-font: ( null: map-get($font-sizes, xxxs), xs: map-get($font-sizes, xxxs), md: map-get($font-sizes, xxxs), lg: map-get($font-sizes, xxs));